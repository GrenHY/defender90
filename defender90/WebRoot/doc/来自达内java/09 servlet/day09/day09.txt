1,过滤器
	(1)过滤器是什么?
		servlet规范当中定义的一种特殊的组件，用来
	拦截servlet容器的调用过程并进行处理。
	(2)怎样写一个过滤器?
		step1,写一个java类，实现Filter接口。
		step2,在doFilter方法里面，实现拦截处理。
		step3,配置过滤器(web.xml)
	(3)过滤器的优先级
		当有多个过滤器都满足过滤的条件，则容器依据
		<filter-mapping>的先后顺序来调用各个过滤器。
	(4)初始化参数
		step1, 配置初始化参数
		<init-param>
  			<param-name>illegalStr</param-name>
  			<param-value>猪</param-value>
  		</init-param>
  		step2,  String FilterConfig.
  		getInitParameter(String paramName);
  	(5)优点
  		 1)可以不用修改原程序来增加一些新的功能。
  		 2) 可以将多个组件相同的处理逻辑集中写在
  		 过滤器里面，方便代码的维护。
	练习：
		写一个过滤器(CommentFilterB),检查评论的
		字符的个数，如果超过20个字符，则提示
		评论的字数过多。

2,监听器
	(1)什么是监听器
		servlet规范当中定义的一种特殊的组件，用来
	监听servlet容器产生的事件并进行处理。
		注：
			事件主要有两大类：
			1)生命周期相关的事件:容器创建或者销毁了
			request,session,ServletContext(servlet上
			下文)产生的事件。
			2)绑订相关的事件:调用了request,session,
			serlvet上下文的setAttribute,removeAttribute
			产生的事件。
	(2)如何写一个监听器
			step1,写一个java类，实现相应的监听器接口。
			比如，要监听session对象的创建和销毁产生的
			事件，需要实现HttpSessionListener接口。
			step2,	在监听器接口方法当中，实现相应的监听
			处理逻辑。
			比如，为了统计在线人数，也就是说，要统计
			session对象的个数，可以在HttpSessionListener
			接口提供的sessionCreated方法当中将人数加1.
			step3,注册(web.xml)
(3)ServletContext  
	1)容器一启动，就会为每一个web应用创建唯一的
	一个符合ServletContext接口要求的对象，该对象
	通常被称作servlet上下文。
		servlet上下文有两个特点:
			a,唯一性： 一个web应用对应一个servlet
						上下文。
			b,一直存在：  只要web应用没有被卸载，
							容器没有关闭，则servlet上下文
							一直存在。
	2)如何获得servlet上下文
		GenericServlet,HttpSession,
		ServletConfig,FilterConfig
		都提供了getServletContext方法。
	3)作用
		a,绑订数据
			setAttribute,getAttribute,removeAttribute
			注：
				绑订到servlet上下文上的数据会一直存在，
			而且，绑订到servlet上下文的数据跨会话(
			也就说，不同会话都可以访问到上面的数据)。
		b,访问全局的初始化参数
			step1,配置
				<context-param>
  					<param-name>version</param-name>
  					<param-value>1.0</param-value>
  				</context-param>
  			step2,
  				String ServletContext
  				.getInitParameter(String paramName);
		
						
				
						
				


	
	