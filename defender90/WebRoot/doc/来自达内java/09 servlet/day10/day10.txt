1.request,session,servlet上下文都可以绑订数据，
如何选择?
	(1)优先使用生命周期短的。
	request < session < servlet上下文
	(2)数据可以被访问的范围
	request < session < servlet上下文
	request:  同一个请求所涉及的组件，比如
				转发，过滤器与servlet。
	session:同一个会话(用户)
	servlet上下文:所有会话(用户)

2,servlet线程安全问题
	(1)为什么说servlet会有线程安全问题?
		a, 容器在默认情况下，只会创建一个servlet实例。
		b,当有多个请求到达容器，容器会启动多个线程
		来处理，就有可能有多个线程同时调用同一个
		servlet实例，就有可能产生线程安全问题。
		比如：多个线程同时修改某个servlet的属性值。
	(2)解决方式
		a,加锁
			使用synchronized对代码块加锁。
			注意：加锁会影响性能。
		b,实现SingleThreadModel接口(不建议使用)
			容器会为每一个线程创建一个servlet实例。
			标识接口

3.servlet小结		
	(1)servlet基础
		1)什么是servlet?
		2)什么是servlet容器?
		3)如何开发一个servlet?
		4)servlet是如何运行的?
		5)http协议(了解)
			a,什么是http协议
			b,两种请求数据包的结构
			c,状态码，消息头
			d,两种请求方式(get/post)及特点
	(2)servlet核心
		1)如何获得请求参数值?
		2)表单包含中文参数值，如何处理?
		3)servlet如何输出中文?
		4)servlet容器如何处理请求资源路径?
		5)如何让一个servlet处理多种请求?
		6)重定向与转发
		7)servlet的生命周期
		8)	servlet线程安全问题
		9)servlet上下文
	(3)状态管理
		1)什么是状态管理?
		2)cookie
			a,什么是cookie?
			b,如何添加一个cookie?
			c,cookie的编码问题、生存时间问题、路径问题
			d,如何查询cookie?
			e,cookie的限制
		3)session
			a,什么是session
			b,如何获得一个session对象
			c,session绑订数据相关的几个方法
			d,session超时 
			e,删除session
			f,禁止cookie以后，如何继续使用session?
	(4)过滤器与监听器
			a,什么是过滤器
			b,如何写一个过滤器
			c,过滤器的优先级
			d,初始化参数
			e,优点
			f,什么是监听器
			g,如何写一个监听器
	(5)数据库访问
			a,如何使用jdbc访问数据库
			b,dao
	(6)典型案例
			a,员工信息管理
			b,登录
			c,session验证 
			d,验证码
			
4,jsp基础 
	(1)什么是jsp?
	(2)如何写一个jsp?
		step1,写一个以".jsp"为后缀的文件
		step2,添加
			1)html (css,js) :  直接写。
			2)java代码:
				a, <%     %>
				b, <%=    %>
				c,  jsp声明     (a1.jsp)
					<%!     %>
			3)指令
				a,什么是指令
					告诉容器，在将jsp文件转换成servlet类时
				做一些额外的处理，比如导包。
				b,page指令
					import属性：导包
					pageEncoding属性：jsp文件的编码
					contentType属性: 设置response.setContentType
										的内容。
					session属性(a2.jsp): true(缺省)/false,当值为false时，
								容器不再添加获得session对象的代码。
					isErrorPage属性(a3.jsp,a4.jsp):true/false(缺省)，当值为true时，
								表示这是一个异常处理页面，可以使用
								exception隐含对象来获得异常信息。
					errorPage属性:指定异常处理页面的。			
				c,include指令
					file属性：告诉容器，将file属性指定的文件的
					内容，插入到该指令所在的位置。
				d,taglib指令
					导入jsp标签。
			4)隐含对象
				a,什么是隐含对象
				b,为什么可以直接使用这些隐含对象
				c,有哪些隐含对象
					out,request,response
					session,application
					exception: 必须设置errorPage属性等于
							true时才能使用。
					pageContext: 容器会为每一个jsp实例
					(jsp对应的那个servlet对象)创建一个
					符合PageContext接口要求的对象。
						作用1：查找其它八个隐含对象。
						作用2：绑订数据。(a5.jsp)
					config: ServletConfig (a6.jsp)
					page: jsp实例本身
				5)注释  (a7.jsp)
					a, <!--  注释内容 --> : 如果注释的内容是
						java代码，会被容器执行，但是，执行的
						结果不会显示出来。
					b, <%-- 注释内容 --%>:如果注释的内容是
						java代码，不会执行。
	(3)jsp执行的过程				
		step1,容器要将jsp文件转换成一个servlet类
			html    ---->  service方法 out.write输出
			<%  %> ---->  service方法，照搬
			<%= %> ---->  service方法，out.print输出
			<%!  %>  ----> 添加新的属性和方法
		step2,容器调用servlet
		
5, jsp标签和el表达式
	(1)什么是jsp标签
		jsp标签类似于html标签,用来代替jsp文件中的
	java代码。
		因为在jsp文件当中，如果包含了很多java的话，不
	方便jsp文件的维护(比如，将这个jsp文件交给美工来
	修改就很不方便),所以，sun公司制订了jsp标签技术
	规范，可以将jsp标签看作是一个占位符，容器会依据
	jsp标签找到对应的标签类然后执行其中的java代码。
		使用jsp标签，页面变得更简洁，方便维护，而且
	更利于代码的复用。
	(2)什么是el表达式
		是一套简单的计算规则，用于给jsp标签的属性
	赋值，也可以直接输出。
	(3)el表达式的使用
		1)访问bean的属性 ( e1.jsp)
			a,方式一   
			${user.name}:  容器依次从pageContext,request,
							session,application当中查找绑订名
							为"user"的对象，找到之后，调用该
							对象的"getName"方法，最后输出。
						注意:
							a1. 会将null转换成""输出。
							a2.找不到绑订名为"user"的对象，会
								输出""。
							a3.可以使用"pageScope","requestScope",
								"sessionScope","applicationScope"来指
								定查找范围。
			b,方式二 
				${user["name"]}	
						注意：
							b1,[]里面可以出现变量
							b2,[]里面可以出现从0开始的下标，
							用来访问数组中的某个元素。							
		2)做一些简单的运算，运算的结果一般用来给
		jsp的标签赋值，也可以直接输出。(e2.jsp)
			a,算术运算: "+","-","*","/","%"
						注意："+"只能求和。
			b,关系运算: ">",">=","<","<=","==","!="
			c, 逻辑运算: "&&","||","!"
			d, empty运算: 用来判断集合是否为空，或者
						是否为一个空字符串("")。	
		3)获得请求参数值 (e3.jsp)
			${param.name}
				等价于 request.getParameter("name");	
			${paramValues.city}		
				等价于 request.getParameterValues("city");
	(4)jstl(java standard tag lib)
			1)jstl是apache捐献给sun的一套jsp标签。
			2)jstl如何使用?
				step1,将jsp标签对应的jar文件(包含的是
				标签类的字节码文件和标签的描述文件)	
				拷贝到WEB-INF\lib下。
				注：
					如果使用的是javaee5.0以上的版本，不用
				拷贝(javaee5.0已经包含了jstl对应的jar文件)
				step2,使用taglib指令引入标签。
						uri: 指定标签的命名空间，要按照
						.tld文件中的描述来填写。
						prefix：指定命名空间的前缀。
					容器依据uri找到标签的描述文件(.tld文件),
					然后依据标签的名称(比如 if)找到标签类，
					接下来，将标签类实例化，然后调用其方法。
				a, if标签		(tag1.jsp)
					<c:if test="" var="" scope="">
						标签体 
					<c:/if>
					当test属性值为true时，容器会执行标签
					体的内容。test属性可以使用el表达式来赋
					值。
					var属性：指定一个绑订名称
					scope属性：指定绑订范围("page",
								"request","session","application")。
					
					
					
							
	
		
	
		
			
			